{:paths ["src"]
 :deps {wanishing/databricks-connect-installer {:local/root "."}
        io.github.clojure/tools.build {:git/tag "v0.9.6" :git/sha "8e78bcc"}}
 :min-bb-version "1.3.186"
 :bbin/bin {databricks-connect-installer {:main-opts ["-m" "wanishing.databricks-connect-installer.core/-main"]}}
 :tasks
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str]
             [clojure.edn :as edn])

  lint {:doc "Run cljstyle & clj-kondo"
        :task
        (do
          (shell "cljstyle fix --report src")
          (shell "clj-kondo --lint src"))}
  
  dev-install {:doc "Install locally for dev"
               :task 
               (shell "bbin install . --as dbx-dev --main-opts \"[\\\"-m\\\" \\\"wanishing.databricks-connect-installer.core/-main\\\"]\"")}

  run-cmd {:doc "Run wit with arguments (usage: bb run-cmd -- [args])"
           :task (shell (str "bb -cp src -m wanishing.databricks-connect-installer.core " (str/join " " *command-line-args*)))}

  run-main {:doc "Run main"
            :task (let [cmd]
                    (apply clojure "-M -m wanishing.databricks-connect-installer" *command-line-args*))}

  uberjar {:doc "Build uberjar"
           :task (do
                  (println "Making uberjar")
                  (clojure "-T:build uber"))}

  publish {:doc "Push version tag to trigger release workflow"
           :task (do
                  (shell {:continue true} "git add .")
                  (let [version (-> (slurp "deps.edn")
                                  edn/read-string
                                  :aliases
                                  :databricks-connect-installer
                                  :project
                                  :version)]
                    (when (shell {:continue true :out nil} (str "git tag -l v" version))
                      (shell {:continue true} (str "git tag -d v" version))
                      (shell {:continue true} (str "git push origin :refs/tags/v" version)))
                    (shell {:continue true} (format "git commit -m 'Release version %s'" version))
                    (shell {:continue true} (str "git tag v" version))
                    (shell "git push --atomic origin initial-1" (str "v" version))))}}}
